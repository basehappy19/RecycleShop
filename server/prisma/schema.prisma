generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id         Int             @id @default(autoincrement())
  studentId  String          @unique
  classroom  String
  fullName   String
  password   String
  point      Int             @default(0)
  totalPoint Int             @default(0)
  records    Record[]        
  orders     Order[]         
  requests   RequestQRCode[] 
}

model Record {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  point     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        Int            @id @default(autoincrement())
  name      String
  price     Int            @default(0)
  image     String         @default("default-product.jpg")
  createdAt DateTime       @default(now()) @db.Timestamp(6)
  updatedAt DateTime       @updatedAt @db.Timestamp(6)
  detail    Detail?
}

model Detail {
  id         Int      @id @default(autoincrement())
  productId  Int      @unique
  inStock    Int      @default(0)
  sales      Int      @default(0)
  openSale   Boolean  @default(false)
  discount   Int      @default(0)
  newProduct Boolean  @default(false)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  Delivered
  Canceled
  Refunded
}

model Order {
  id           Int          @id @default(autoincrement())
  studentId    Int
  orderBy      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  totalPrice   Int
  status       OrderStatus  @default(Pending)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}


enum RequestStatus {
  WAITING_FOR_SCAN
  STUDENT_ID_RECEIVED
  COMPLETED
}

model RequestQRCode {
  id          Int           @id @default(autoincrement())
  studentId   Int?
  student     Student?      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  binId       Int?
  bin         Bin?          @relation(fields: [binId], references: [id], onDelete: Cascade)
  bottleCount Int           @default(0)
  link        String        @unique
  code        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  expiredAt   DateTime?
  status      RequestStatus @default(WAITING_FOR_SCAN)
}

model Bin {
  id          Int             @id @default(autoincrement())
  key         String          @db.Text
  totalBottle Int             @default(0)
  location    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  requests    RequestQRCode[]
}
