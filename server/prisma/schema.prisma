generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id           Int      @id @default(autoincrement())
  studentId    String   @unique
  fullName     String
  password     String
  point        Int      @default(0)
  totalPoint   Int      @default(0)
  records      Record[] @relation("StudentRecord")
  orders       Order[]  @relation("OrderByStudent")
  requests RequestQRCode[] @relation("StudentRequest")
}

model Record {
  id         Int      @id @default(autoincrement())
  studentId  Int
  student    Student  @relation("StudentRecord", fields: [studentId], references: [id])
  point      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ListOrder {
  id        Int  @id @default(autoincrement())
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String
  price     Int       @default(0)
  image     String    @default("default-product.jpg")
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  manage    ManageProduct? @relation("ManageProduct")
  listOrders ListOrder[]
}

model ManageProduct {
  id         Int      @id @default(autoincrement())
  productId  Int      @unique  
  inStock    Int      @default(0)
  sales      Int      @default(0)
  openSale   Boolean  @default(false)
  discount   Int      @default(0)
  newProduct Boolean  @default(false)
  product    Product  @relation("ManageProduct", fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Order {
  id                Int       @id @default(autoincrement())
  orderCodeKey      String    @db.VarChar(255)
  roomId            Int
  orderByStudentId  Int
  orderByStudent    Student  @relation("OrderByStudent", fields: [orderByStudentId], references: [id])
  totalPrice        Int
  statusId          Int      @default(1)
  status            Status   @relation("OrderStatus", fields: [statusId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  listOrders        ListOrder[]
}

model Status {
  id           Int      @id @default(autoincrement())
  title        String
  desperation  String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]  @relation("OrderStatus")
}

enum RequestStatus {
  WAITING_FOR_SCAN
  STUDENT_ID_RECEIVED
  COMPLETED
}

model RequestQRCode {
  id            Int          @id @default(autoincrement())
  studentId     Int?
  student       Student?     @relation("StudentRequest", fields: [studentId], references: [id])
  binId         Int?    
  bin           Bin?         @relation(fields: [binId], references: [id]) 
  bottleCount   Int          @default(0)
  link          String       @unique  
  code          String       @unique  
  createdAt     DateTime     @default(now()) 
  updatedAt     DateTime     @updatedAt 
  expiredAt     DateTime?    
  status        RequestStatus @default(WAITING_FOR_SCAN)  
}

model Bin {
  id            Int      @id @default(autoincrement())
  no            Int
  key           String
  totalBottle   Int      @default(0)
  location      String
  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt 
  requests      RequestQRCode[]
}

